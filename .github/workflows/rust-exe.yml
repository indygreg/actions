name: Build an executable from a Rust workspace
on:
  workflow_call:
    inputs:
      actions_repo:
        description: indygreg/actions repo
        type: string
        default: "indygreg/actions"
      actions_ref:
        description: Git commit, tag, or ref of indygreg/actions to use
        required: true
        type: string
      bin:
        description: Name of binary to build
        required: true
        type: string
      extra_build_args_linux:
        description: Extra arguments to pass to `cargo build` on Linux
        required: false
        type: string
      extra_build_args_macos:
        description: Extra arguments to pass to `cargo build` on Windows
        required: false
        type: string
      extra_build_args_windows:
        description: Extra arguments to pass to `cargo build` on macOS
        required: false
        type: string
      just_bootstrap:
        description: Whether to run just bootstrap targets
        required: false
        type: boolean
      sccache_s3_bucket:
        description: S3 bucket to use for sccache
        type: string
        required: true
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        target:
          - os: 'ubuntu-22.04'
            triple: 'aarch64-unknown-linux-musl'
            cross: true
          - os: 'ubuntu-22.04'
            triple: 'x86_64-unknown-linux-musl'
          - os: 'macos-12'
            triple: 'aarch64-apple-darwin'
          - os: 'macos-12'
            triple: 'x86_64-apple-darwin'
          - os: 'windows-2022'
            triple: 'i686-pc-windows-msvc'
          - os: 'windows-2022'
            triple: 'x86_64-pc-windows-msvc'
    runs-on: ${{ matrix.target.os }}
    env:
      IN_CI: '1'
      AWS_REGION: us-west-2
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      SCCACHE_BUCKET: ${{ inputs.sccache_s3_bucket }}
      SCCACHE_S3_USE_SSL: '1'
      # Prevent sccache server from stopping due to inactivity.
      SCCACHE_IDLE_TIMEOUT: '0'
      CARGO_INCREMENTAL: '0'
    steps:
      - name: Checkout main repo
        uses: actions/checkout@v3

      - name: Checkout actions repo
        uses: actions/checkout@v3
        with:
          repository: ${{ inputs.actions_repo }}
          ref: ${{ inputs.actions_ref }}
          path: indygreg-actions

      - name: Conditionally Enable sccache
        shell: bash
        run: |
          if [ -n "${AWS_SECRET_ACCESS_KEY}" ]; then
            echo "enabling sccache"
            echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
            echo "CROSS_CONFIG=$(pwd)/indygreg-actions/Cross.toml" >> $GITHUB_ENV
          fi

      - uses: ./indygreg-actions/rust-bootstrap
        with:
          rust_toolchain: stable
          rust_target: ${{ matrix.target.triple }}
          just_bootstrap: ${{ inputs.just_bootstrap }}
          cross_image: "1"

      - name: Build
        shell: bash
        run: |
          if [ "${{ matrix.target.triple }}" = "aarch64-apple-darwin" ]; then
            export MACOSX_DEPLOYMENT_TARGET=11.0
          elif [ "${{ matrix.target.triple }}" = "x86_64-apple-darwin" ]; then
            export MACOSX_DEPLOYMENT_TARGET=10.9
          fi

          if [ -n "${{ matrix.target.cross }}" ]; then
            CARGO=cross
          else
            CARGO=cargo
          fi

          case "${{ matrix.target.triple }}" in
            *linux*)
              EXTRA_BUILD_ARGS=${{ inputs.extra_build_args_linux }}
              ;;
            *apple-darwin*)
              EXTRA_BUILD_ARGS=${{ inputs.extra_build_args_macos }}
              ;;
            *windows*)
              EXTRA_BUILD_ARGS=${{ inputs.extra_build_args_windows }}
              ;;
            *)
              ;;
          esac

          $CARGO build --release --bin ${{ inputs.bin }} --target ${{ matrix.target.triple }} ${EXTRA_BUILD_ARGS}

          mkdir upload
          cp target/${{ matrix.target.triple }}/release/${{ inputs.bin }}* upload/
          sccache --stop-server

      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-${{ matrix.target.triple }}
          path: upload/${{ inputs.bin }}*
          if-no-files-found: error

  macos-universal:
    needs:
      - build
    runs-on: 'macos-12'
    steps:
      - name: Download aarch64 executable
        uses: actions/download-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-aarch64-apple-darwin
          path: ${{ inputs.bin }}-aarch64

      - name: Download x86-64 executable
        uses: actions/download-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-x86_64-apple-darwin
          path: ${{ inputs.bin }}-x86-64

      - name: Produce Universal Binary
        run: |
          mkdir -p uploads
          lipo ${{inputs.bin}}-x86-64/${{inputs.bin}} ${{inputs.bin}}-aarch64/${{inputs.bin}} -create -output uploads/${{inputs.bin}}
          chmod +x uploads/${{inputs.bin}}
          lipo uploads/${{inputs.bin}} -info

          # There might be a COPYING file with licensing info. If so, preserve it.
          if [ -e "${{inputs.bin}}-x86-64/COPYING" ]; then
            cp -v ${{inputs.bin}}-x86-64/COPYING uploads/
          fi

      - name: Upload Universal Executable
        uses: actions/upload-artifact@v3
        with:
          name: exe-${{ inputs.bin }}-macos-universal
          path: uploads/${{ inputs.bin }}
          if-no-files-found: error
